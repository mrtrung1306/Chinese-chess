@{
    ViewData["Title"] = "List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/css/lobby.css" rel="stylesheet"  />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.css" integrity="sha512-0Nyh7Nf4sn+T48aTb6VFkhJe0FzzcOlqqZMahy/rhZ8Ii5Q9ZXG/1CbunUuEbfgxqsQfWXjnErKZosDSHVKQhQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js" integrity="sha512-hkvXFLlESjeYENO4CNi69z3A1puvONQV5Uh+G4TUDayZxSLyic5Kba9hhuiNLbHqdnKNMk2PxXKm0v7KDnWkYA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<style>
    .emojionearea {
        width: 0%;
    }
</style>
<div id="app" class="containere">
    @*<template v-if="userData">*@
        <article class="game-lobby">
            <section class="game-lobby-input-container form">
                @*<div type="text" class="game-lobby-input-name" id="userInput">{{userName}}</div>*@
                <button type="submit" class="game-lobby-input-create-btn game-btn" v-on:click="insertRoom()">CREATE ROOM</button>
            </section>

            <section class="game-lobby-title-container">
                <div class="game-lobby-title-room" >GAME ROOM</div>
                <div class="game-lobby-title-chat">CHAT</div>
            </section>

            <section class="game-lobby-room-chat-container">   
                <div  class="game-lobby-room-container">
                    <div class="sTCw_PUp0uMM9Y_nZcc4AQ" v-for="item in roomList">
                        <span class="game-lobby-room-name"  >{{item.name}}</span>
                        <button class="game-lobby-room-join-btn game-btn btn" v-on:click="addUserToRoom(item.id)">JOIN</button>
                    </div>
                </div>

                <div class="game-lobby-chat-container chat-container">
                    <div class="game-lobby-chat-window-wrapper chat-window-wrapper">
                        <ul class="game-lobby-chat-window chat-window" id="messagesList"></ul>
                    </div>
                    <div class="game-lobby-chat-input-wrapper chat-input-wrapper">
                        <input type="text" class="game-lobby-chat-input chat-input" placeholder="Type a message" autofocus id="MyText" />
                        <button type="button" class="game-lobby-chat-send-btn chat-send-btn game-btn" id="sendButton" value="Send Message">></button>
                    </div>
                </div>
            </section>
        </article>
    @*</template>*@
</div>
<div id="default-route-url" data-url="@Url.Action("Login", "Home")"></div>


<!-- jQuery -->
<script type="text/javascript">
    
</script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            roomList: [],
            userData: JSON.parse(localStorage.getItem('userData')),
            userName: localStorage.getItem('userName'),
            userInRoomList :[],
        },
        methods: {
            insertRoom() {
                axios({
                    url: '/api/chess/insertRoom/',
                    method: 'POST',
                    headers: {
                        'Authorization': 'bearer ' + this.userData.token,
                    },

                }).then((response) => {
                    this.addUserToRoom(response.data.data);
                });
            },
            getRoom() {
                const token = JSON.parse(localStorage.getItem('userData'));
                axios({
                    url: '/api/chess/getRoom',
                    method: 'GET',
                    responseType: 'Json',
                    headers: {
                        'Authorization': 'bearer ' + token.token, // Include the token in the request headers
                    },
                }).then((response) => {
                    this.roomList = response.data.data; '' //lấy dữ liệu từ controller
                });
            },
            addUserToRoom(roomId) {
                axios({
                    url: '/api/chess/addUserToRoom',
                    method: 'POST',
                    headers: {
                        'Authorization': 'bearer ' + this.userData.token,
                    },
                    params: {
                        roomId,
                    },
                }).then((response) => {
                    window.location.href = 'Index';
                    localStorage.setItem('roomId', roomId);
                });
            },

        },
        login: function () {
            var defaultRouteUrl = document.getElementById('default-route-url').getAttribute('data-url');
            window.location.href = defaultRouteUrl;
        },
        mounted: function () {
            this.getRoom();
            var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

            //Disable the send button until connection is established.
            document.getElementById("sendButton").disabled = true;

            connection.on("ReceiveMessage", function (user, message) {
                var li = document.createElement("li");
                document.getElementById("messagesList").appendChild(li);
                li.textContent = `${user} says: ${message}`;
            });
            connection.on("UpdateLobbyChatInternalMessage", function (user, message) {
                var li = document.createElement("li");
                document.getElementById("messagesList").appendChild(li);
                // We can assign user-supplied strings to an element's textContent because it
                // is not interpreted as markup. If you're assigning in any other way, you 
                // should be aware of possible script injection concerns.
                li.textContent = `${message}`;
            });
            connection.start().then(function () {
                document.getElementById("sendButton").disabled = false;
            }).catch(function (err) {
                return console.error(err.toString());
            });

            document.getElementById("sendButton").addEventListener("click", function (event) {
                var user = document.getElementById("userInput").textContent;
                var message = document.getElementById("MyText").value;
                connection.invoke("SendMessage", user, message).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            });

            $('#MyText').emojioneArea({
                pickerPosition: 'left'
            });
        }
    });
</script>